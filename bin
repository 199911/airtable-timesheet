#!/usr/bin/env node

const program = require('commander');
const moment = require('moment');
require('moment-timezone');
const timesheet = require('./timesheet');
const tag = require('./tag');

// program
//     .version('0.1.0')
//     .alias('l')
//     .action(() => {
//         timesheet.listAsync()
//             .then((tasks) => {
//                 console.log('Time, Mood, Difficulty, Description');
//                 tasks.forEach((task) => {
//                     let { Time, Mood, Difficulty, Description } = task.fields
//                     Time = moment(Time).tz('Asia/Hong_Kong').format('hh:mm:ss');
//                     console.log(`${Time}, ${Mood}, ${Difficulty}, ${Description}`);
//                 })
//             })
//             .catch((err) => {
//                 console.error(err);
//             });
//     })
//     .command('list');

program
    .version('0.1.0')
    .arguments('<mood> <difficulty>  [tokens...]')
    .description('run the given remote command')
    .action((mood, difficulty, tokens) => {
        const description = tokens.join(' ');
        timesheet.listAsync()
            .then((tasks) => {
                // TODO: refactor to make the get previous task logic
                //       functional.
                let previousTask = null;
                tasks.forEach((task) => {
                    let { Time } = task.fields
                    if (!previousTask) {
                        previousTask = task;
                    } else {
                        // TODO: clean up the time logic with our own time format
                        if (moment(Time) > moment(previousTask.fields.Time)) {
                            previousTask = task;
                        }
                    }
                });
                return timesheet.startAsync(
                    tag.normalize(mood),
                    parseInt(difficulty, 10),
                    description,
                    previousTask && previousTask.fields.Time
                );
            })
            .then((res) => {
                const { Time, Duration } = res.fields;
                console.log( `Time: ${Time}\tDuration: ${Duration}` );
            })
            .catch((err) => {
                console.error(err);
            });
    })

program
    .parse(process.argv);
